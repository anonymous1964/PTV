#include<reg52.h>
#define uchar unsigned char
#define uint unsigned int 
sbit juli=P3^2;
sbit chengke1=P1^0;				//乘客1到达的车站?
sbit chengke2=P1^1;			    //乘客2到达的车站?
sbit chengke3=P1^2;			    //乘客3到达的车站?
sbit guan=P2^0;
sbit beep=P3^6;
sbit dula=P2^6;
sbit wela=P2^7;
uchar code table[]={
0x3f,0x06,0x5b,0x4f,
0x66,0x6d,0x7d,0x07,
0x7f,0x6f,0x77,0x7c,
0x39,0x5e,0x79,0x71
};

uchar num=0;
uchar distance1;					//乘客1设置的提醒距离
uchar distance2;					//乘客2设置的提醒距离
uchar distance3;				   //乘客3设置的提醒 距离
uchar final1;					   //计算所得乘客1该提醒地点
uchar final2;					   //计算所得乘客2该提醒地点
uchar final3;
void delayms(uchar xms)
{
	uchar i,j;
	for(i=xms;i>0;i--)
		for(j=110;j>0;j--);
}						
void cejumokuai()				 //小车行驶到哪个车站 
{
	if(juli==1)
		{   
			num++;
			beep=0;
			delayms(50);
			beep=1;
		}	
}
void daozhanjisuan()		//乘客提醒地点计算
{
	 //乘客1该提醒地点
	if(chengke1==0)		     
	{
		final1=0+distance1;
	}
	else
	{
		final1=3+distance1;
	}
	//乘客2该提醒地点
	if(chengke2==0)
	{
		final2=0+distance2;
	}
	else
	{
		final2=3+distance2;
	}
	//乘客3该提醒地点
	if(chengke3==0)
	{
		final3=0+distance3;
	}
	else
	{
		final3=3+distance3;
	}
} 
 void daozhantixing()			   //乘客和乘务员提醒
{

	P0=0;
	dula=1;
	P0=table[final3];
	dula=0;
	P0=0xff;
	wela=1;
	P0=0xfe;
	wela=0;
 }

uchar matrixkeyscan()
{
	uchar temp,key;
	P3=0xfe;
	temp=P3;
	temp=temp&0xf0;
	if(temp!=0xf0)
	{
		delayms(10);
		temp=P3;
		temp=temp&0xf0;
		if(temp!=0xf0)
		{
			temp=P3;
			switch(temp)
			{
				case 0xee:distance1=1;break;
				case 0xde:distance1=2;break;
				case 0xbe:distance1=3;break;
				case 0x7e:distance1=-1;break;
			}
			while(temp!=0xf0)
			{
				temp=P3;
				temp=temp&0xf0;
			}
			return distance1;
		}
	}
	P3=0xfd;
	temp=P3;
	temp=temp&0xf0;
	if(temp!=0xf0)
	{
		delayms(10);
		temp=P3;
		temp=temp&0xf0;
		if(temp!=0xf0)
		{
			temp=P3;
			switch(temp)
			{
				case 0xed:distance2=1;break;
				case 0xdd:distance2=2;break;
				case 0xbd:distance2=3;break;
				case 0x7d:distance2=-1;break;
			}
			while(temp!=0xf0)
			{
				temp=P3;
				temp=temp&0xf0;
			}
			return distance2;
		}
	}
	P3=0xfb;
	temp=P3;
	temp=temp&0xf0;
	if(temp!=0xf0)
	{
		delayms(10);
		temp=P3;
		temp=temp&0xf0;
		if(temp!=0xf0)
		{
			temp=P3;
			switch(temp)
			{
				case 0xeb:distance3=1;break;
				case 0xdb:distance3=2;break;
				case 0xbb:distance3=3;break;
				case 0x7b:distance3=-1;break;
			}
			while(temp!=0xf0)
			{
				temp=P3;
				temp=temp&0xf0;
			}
			return distance3;
			 
		}
	}


}

void main()
{
	while(1)
	{
	matrixkeyscan();
	daozhanjisuan();
	daozhantixing();
	}
}
